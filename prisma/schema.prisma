// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cartItems     CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Int
  images      String[] // Keep for backward compatibility, will store base64 or file paths
  imageData   String?  // Store base64 encoded images
  collection  String
  inStock     Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  isNewArrival Boolean @default(false)
  // Additional attributes from pd.md
  articleName String?
  color       String?
  fabric      String?
  embroidery  String?
  shawlLength String?
  suitFabric  String?
  usage       String?
  care        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int     @default(1)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  status        OrderStatus @default(PENDING)
  total         Int
  paymentMethod String
  paymentStatus String      @default("PENDING")
  shippingAddress String
  billingAddress  String?
  phone         String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

// Store-wide settings (single row expected)
model StoreSettings {
  id                       String  @id @default(cuid())
  storeName                String
  storeDescription         String?
  storeEmail               String?
  storePhone               String?
  storeAddress             String?
  maintenanceMode          Boolean @default(false)
  allowRegistration        Boolean @default(true)
  requireEmailVerification Boolean @default(false)
  enableNotifications      Boolean @default(true)
  lowStockThreshold        Int     @default(10)
  currency                 String  @default("PKR")
  timezone                 String  @default("Asia/Karachi")
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}
